name: EKS Automate

on:
  push:
    branches:
      - main

jobs:
  deploy-or-destroy:
    runs-on: ubuntu-latest

    env:
      AWS_DEFAULT_REGION: ca-central-1
      AWS_INSTANCE_SIZE: t3.xlarge
      AWS_EKS_VERSION: 1.28
      AWS_EKS_CLUSTER_NAME: sysdig-trial-cluster
      AWS_EKS_NODEGROUP_NAME: sysdig-nodegroup
    

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4


      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_DEFAULT_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install eksctl
        run: |
          curl --silent -L "https://github.com/eksctl-io/eksctl/releases/download/v0.164.0/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/eksctl

  
      - name: Deploy or Destroy EKS cluster
        run: |
          if [[ -f DEPLOY ]] && [[ -f DESTROY ]]; then
            echo "Cannot perform both a  DEPLOY and DESTROY, please remove one of the files. Exiting..."
            exit 1
          fi

          if [[ -f DEPLOY ]]; then
            echo "Checking if the EKS cluster exists..."
            if aws eks describe-cluster --name $AWS_EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION &> /dev/null; then
              echo "EKS cluster already exists. Skipping deployment."
            else
              echo "Deploying EKS cluster..."
              #eksctl create cluster --name $AWS_EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION --node-type $AWS_INSTANCE_SIZE
              eksctl create cluster \
                --name $AWS_EKS_CLUSTER_NAME \
                --region $AWS_DEFAULT_REGION \
                --version $AWS_EKS_VERSION \
                --nodegroup-name $AWS_EKS_NODEGROUP_NAME \
                --node-type $AWS_INSTANCE_SIZE \
                --nodes 1 \
                --nodes-min 1 \
                --nodes-max 2 \
                --tags Environment=DEV,Project=eks-automate
            fi

          elif [[ -f DESTROY ]]; then
            echo "Checking if the EKS cluster exists..."
            if ! aws eks describe-cluster --name $AWS_EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION &> /dev/null; then
              echo "EKS cluster does not exist. Skipping destruction."
            else
              echo "Destroying EKS cluster..."
              eksctl delete cluster --name $AWS_EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION
            fi

          else
            echo "No DEPLOY or DESTROY file found. Skipping..."
          fi

        continue-on-error: true
